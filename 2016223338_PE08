#include <stdio.h>
#include <signal.h>

#define oops(m, x) { perror(m); exit(x); }

#define READ 0
#define WRITE 1

FILE *popen2(const char *command, const char *mode);

int main() {
	FILE *fp;
	char buf[BUFSIZ];

	fp = popen2("ls", "r");
	while(fgets(buf,BUFSIZ, fp) != NULL)
		fputs(buf, stdout);

	fp = popen2("ls", "w");
	while(fgets(buf, BUFSIZ, fp) != NULL)
		fputs(buf, stdin);
}

FILE *popen2(const char *command, const char *mode) {
	int p[2], pid;
	FILE *fp;

	if(pipe(p) == -1) oops("pipe failed", 1);

	if((pid = fork()) == -1) oops("cannot fork", 2);

	if(strcmp(mode, "r") == 0 ) {
		if(pid == 0) {
			close(p[0]);
			dup(p[1], 1);
			close(p[1]);
			execl("bin/sh", "sh", "-c", command, NULL);
		} else {
			close(p[1]);
			fp = fdopen(p[0], mode);
			return fp;
		}
	} else {
		printf("write mode\n");
		if(pid == 0) {
			close(p[1]);
			dup2(p[0], 0);
			close(p[0]);
			sleep(2);
			execl("/bin/sh", "sh", "-c", command, NULL);
		} else {
			close(p[0]);
			fp = fdopen(p[1], mode);
			return fp;
		}
	}
}

